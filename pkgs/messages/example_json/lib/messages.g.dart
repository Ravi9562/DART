// Generated by package:messages_builder.

import 'dart:ffi';

import 'package:intl4x/intl4x.dart';
import 'package:messages/messages_json.dart';
import 'package:meta/meta.dart';

class AboutPageMessages {
  AboutPageMessages();

  String _currentLocale = 'en';

  final Map<String, MessageList> _messages = {};

  static const _dataFiles = {
    'fr': ('package:example_json/assets/l10n/testarbctx2_fr.json', 'EyPjEJJU'),
    'en': ('package:example_json/assets/l10n/testarbctx2.json', 'QrwRSsOy')
  };

  String get currentLocale => _currentLocale;

  MessageList get _currentMessages => _messages[currentLocale]!;

  static Iterable<String> get knownLocales => _dataFiles.keys;

  Future<void> loadLocale(String locale) async {
    if (!_messages.containsKey(locale)) {
      final info = _dataFiles[locale];
      final carb = info?.$1;
      if (carb == null) {
        throw ArgumentError('Locale $locale is not in $knownLocales');
      }
      final data = await AssetBundle.loadString(carb);
      final messageList = MessageListJson.fromString(data, _pluralSelector);
      if (messageList.preamble.hash != info?.$2) {
        throw ArgumentError('''
              Messages file for locale $locale has different hash "${messageList.preamble.hash}" than generated code "${info?.$2}".''');
      }
      _messages[locale] = messageList;
    }
    _currentLocale = locale;
  }

  void loadAllLocales() {
    for (final locale in knownLocales) {
      loadLocale(locale);
    }
  }

  String aboutMessage(String websitename) =>
      generateStringAtIndex(0, [websitename]);

  String helloAndWelcome(
    String firstName,
    int lastName,
  ) =>
      generateStringAtIndex(1, [firstName, lastName]);

  String newMessages(int newMessages) =>
      generateStringAtIndex(2, [newMessages]);

  String newMessages2(
    String gender,
    int newVar,
  ) =>
      generateStringAtIndex(3, [gender, newVar]);

  String get otherMsg => generateStringAtIndex(4, []);
}

extension on AboutPageMessages {
  @ResourceIdentifier('AboutPageMessages')
  String generateStringAtIndex(
    int index,
    List args,
  ) =>
      _currentMessages.generateStringAtIndex(index, args);
}

class HomePageMessages {
  HomePageMessages();

  String _currentLocale = 'en';

  final Map<String, MessageList> _messages = {};

  static const _dataFiles = {
    'de': ('package:example_json/assets/l10n/testarb_de.json', 'hbDN1MhX'),
    'en': ('package:example_json/assets/l10n/testarb.json', 'dr9Md951')
  };

  String get currentLocale => _currentLocale;

  MessageList get _currentMessages => _messages[currentLocale]!;

  static Iterable<String> get knownLocales => _dataFiles.keys;

  Future<void> loadLocale(String locale) async {
    if (!_messages.containsKey(locale)) {
      final info = _dataFiles[locale];
      final carb = info?.$1;
      if (carb == null) {
        throw ArgumentError('Locale $locale is not in $knownLocales');
      }
      final data = await AssetBundle.loadString(carb);
      final messageList = MessageListJson.fromString(data, _pluralSelector);
      if (messageList.preamble.hash != info?.$2) {
        throw ArgumentError('''
              Messages file for locale $locale has different hash "${messageList.preamble.hash}" than generated code "${info?.$2}".''');
      }
      _messages[locale] = messageList;
    }
    _currentLocale = locale;
  }

  void loadAllLocales() {
    for (final locale in knownLocales) {
      loadLocale(locale);
    }
  }

  String helloAndWelcome(
    String firstName,
    String lastName,
  ) =>
      generateStringAtIndex(0, [firstName, lastName]);

  String helloAndWelcome2(
    String firstName,
    String lastName,
  ) =>
      generateStringAtIndex(1, [firstName, lastName]);

  String newMessages(int newMessages) =>
      generateStringAtIndex(2, [newMessages]);

  String newMessages2(
    String gender,
    int newVar,
  ) =>
      generateStringAtIndex(3, [gender, newVar]);
}

extension on HomePageMessages {
  @ResourceIdentifier('HomePageMessages')
  String generateStringAtIndex(
    int index,
    List args,
  ) =>
      _currentMessages.generateStringAtIndex(index, args);
}

Message _pluralSelector(
  num howMany,
  String locale, {
  required Message other,
  Message? few,
  Message? many,
  Map<int, Message>? numberCases,
  Map<int, Message>? wordCases,
}) {
  Message getCase(int i) => numberCases?[i] ?? wordCases?[i] ?? other;
  return switch (Intl(locale: Locale.parse(locale)).plural().select(howMany)) {
    PluralCategory.zero => getCase(0),
    PluralCategory.one => getCase(1),
    PluralCategory.two => getCase(2),
    PluralCategory.few => few ?? other,
    PluralCategory.many => many ?? other,
    PluralCategory.other => other,
  };
}
